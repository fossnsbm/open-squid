// "use client";

// import { useState, useEffect } from "react";
// import {
//     Clock,
//     Users,
//     ChevronDown,
//     Trophy,
//     AlertCircle,
//     RefreshCw,
//     Loader2,
// } from "lucide-react";

// import Toast from "@/app/components/common/Toast";

// interface Question {
//     id: string;
//     question: string;
//     options: string[];
//     correct_answer: number;
// }

// interface User {
//     id: string;
//     name: string;
//     email?: string;
// }

// interface QuizSession {
//     id: string;
//     title?: string;
//     status: "pending" | "live" | "completed";
//     current_question_index: number;
//     time_per_question: number;
//     total_questions: number;
//     participant_count?: number;
// }

// interface QuizParticipant {
//     id: string;
//     quiz_session_id: string;
//     user_id: string;
//     user_name: string;
//     score: number;
//     total_questions_answered: number;
// }

// export default function QuizPage() {
//     const [questions, setQuestions] = useState<Question[]>([]);
//     const [users, setUsers] = useState<User[]>([]);
//     const [participants, setParticipants] = useState<QuizParticipant[]>([]);
//     const [loading, setLoading] = useState(true);
//     const [currentSession, setCurrentSession] = useState<QuizSession | null>(  null );
//     const [showToast, setShowToast] = useState<{
//         message: string;
//         type: "success" | "error";
//     } | null>(null);
//     const [userDropdownOpen, setUserDropdownOpen] = useState(false);
//     const [isJoined, setIsJoined] = useState(false);
//     const [checkingForQuiz, setCheckingForQuiz] = useState(false);

//     const [currentUser, setCurrentUser] = useState<User | null>(null);
//     const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
//     const [hasAnswered, setHasAnswered] = useState(false);
//     const [timeLeft, setTimeLeft] = useState(10);

//     const showToastMessage = (message: string, type: "success" | "error") => {
//         setShowToast({ message, type });
//     };
    
     
//       console.log("Loaded questions:", questions);
//      console.log("currentSession:", currentSession);

//     // Load initial data
//     useEffect(() => {
//         loadData();
//     }, []);

//     // //Check for active quiz sessions every 3 seconds
//     // useEffect(() => {
//     //   const interval = setInterval(checkForActiveQuiz, 2000)
//     //   return () => clearInterval(interval)
//     // }, [])

//     // Timer effect for quiz questions
//     useEffect(() => {
//         let interval: NodeJS.Timeout;

//         if (currentSession?.status === "live" && !hasAnswered && timeLeft > 0) {
//             interval = setInterval(() => {
//                 setTimeLeft((prev) => prev - 1);
//             }, 1000);
//         } else if (
//             currentSession?.status === "live" &&
//             timeLeft === 0 &&
//             !hasAnswered
//         ) {
//             handleAutoSubmit();
//         }

//         return () => clearInterval(interval);
//     }, [currentSession?.status, timeLeft, hasAnswered]);

//     const loadData = async () => {
//         try {
//             setLoading(true);
//             const [questionsRes, usersRes] = await Promise.all([
//                 fetch("/api/questions").catch((error) => {
//                     console.error("Failed to fetch questions:", error);
//                     return { ok: false, json: () => Promise.resolve([]) };
//                 }),
//                 fetch("/api/users").catch((err) => {
//                     console.error("Failed to fetch users:", err);
//                     return { ok: false, json: () => Promise.resolve([]) };
//                 }),
//             ]);

//             if (questionsRes.ok) {
//                 try {
//                     const questionsData = await questionsRes.json();
//                     if (Array.isArray(questionsData)) {
//                         setQuestions(questionsData);
                        
//                     } else {
//                         console.error(
//                             "Questions data is not an array:",
//                             questionsData
//                         );
//                         setQuestions([]);
//                     }
//                 } catch (parseError) {
//                     console.error(
//                         "Error parsing questions response:",
//                         parseError
//                     );
//                     setQuestions([]);
//                     showToastMessage("Failed to load questions", "error");
//                 }
//             }

//             if (usersRes.ok) {
//                 try {
//                     const usersData = await usersRes.json();
//                     if (Array.isArray(usersData)) {
//                         const regularUsers = usersData.filter(
//                             (user) => !user.email?.includes("admin")
//                         );
//                         setUsers(regularUsers);
//                         if (regularUsers.length > 0 && !currentUser) {
//                             setCurrentUser(regularUsers[0]);                      //add current user 
//                         }
//                     } else {
//                         console.error("Users data is not an array:", usersData);
//                         setUsers([]);
//                     }
//                 } catch (parseError) {
//                     console.error("Error parsing users response:", parseError);
//                     setUsers([]);
//                     showToastMessage("Failed to load users", "error");
//                 }
//             }

//             // Check for active quiz after loading data
//             await checkForActiveQuiz();
//         } catch (error) {
//             console.error("Error loading data:", error);
//             showToastMessage("Failed to load data from database", "error");
//         } finally {
//             setLoading(false);
//         }
//     };

//     const checkForActiveQuiz = async () => {
//         try {
//             setCheckingForQuiz(true);
//             const response = await fetch("/api/quiz-sessions/active");

//             if (response.ok) {
//                 const activeSession = await response.json();

//                 if (activeSession && activeSession.status === "live") {
//                     console.log("Found active quiz session:", activeSession);

//                     // Check if this is a new session or question change
//                     const isNewSession =  !currentSession || currentSession.id !== activeSession.id;
//                     const isNewQuestion =   currentSession &&  activeSession.current_question_index !== currentSession.current_question_index;
               
//                     if (isNewSession || isNewQuestion) {
//                         setCurrentSession(activeSession);
//                         setTimeLeft(activeSession.time_per_question || 10);
//                         setSelectedAnswer(null);
//                         setHasAnswered(false);

//                         // Auto-join if user is selected and it's a new session
//                         if (currentUser && isNewSession) {
//                             await joinQuiz(activeSession.id);
//                         }

//                         // Load participants
//                               await loadParticipants(activeSession.id)
//                         if (isNewSession) {
//                             showToastMessage(
//                                 "Quiz is now live! Get ready!",
//                                 "success"
//                             );
//                         } else if (isNewQuestion) {
//                             showToastMessage(
//                                 `Question ${
//                                     activeSession.current_question_index + 1
//                                 }`,
//                                 "success"
//                             );
//                         }
//                     }
//                 } else if (currentSession && currentSession.status === "live") {
//                     // Quiz has ended
//                     setCurrentSession((prev) =>
//                         prev ? { ...prev, status: "completed" } : null
//                     );
//                     showToastMessage("Quiz has ended!", "success");
//                 }
//             }
//         } catch (error) {
//             console.error("Error checking for active quiz:", error);
//         } finally {
//             setCheckingForQuiz(false);
//         }
//     };
//     ///check again participent joining
//     const joinQuiz = async (sessionId?: string) => {
//         if (!currentUser) {
//             showToastMessage("Please select a user profile first", "error");
//             return;
//         }

//         const targetSessionId = sessionId || currentSession?.id;
//         if (!targetSessionId) return;

//         try {
//             const response = await fetch(
//                 `/api/quiz-sessions/${targetSessionId}/participants`,
//                 {
//                     method: "POST",
//                     headers: { "Content-Type": "application/json" },
//                     body: JSON.stringify({ userId: currentUser.id }),
//                 }
//             );

//             if (response.ok) {
//                 setIsJoined(true);

//                 await loadParticipants(targetSessionId);
//                 if (!sessionId) {
//                     showToastMessage(
//                         "Successfully joined the quiz!",
//                         "success"
//                     );
//                 }
//             }
//         } catch (error) {
//             console.error("Error joining quiz:", error);
//             showToastMessage("Failed to join quiz", "error");
//         }
//     };

//     const loadParticipants = async (sessionId: string) => {
//         try {
//             const response = await fetch(
//                 `/api/quiz-sessions/${sessionId}/participants`
//             );
//             if (response.ok) {
//                 const data = await response.json();
//                 setParticipants(data);
//             }
//         } catch (error) {
//             console.error("Error loading participants:", error);
//         }
//     };

//     const handleAutoSubmit = () => {
//         if (selectedAnswer !== null) {
//             submitAnswer(selectedAnswer);
//         } else {
//             setHasAnswered(true);
//             showToastMessage("Time's up! No answer submitted.", "error");
//         }
//     };

//     const submitAnswer = async (answer: number) => {
//         if (!currentUser || !currentSession || hasAnswered) return;

//         setHasAnswered(true);
//         const currentQuestion = questions[currentSession.current_question_index];
//                                                                   //quetions
//         if (!currentQuestion) return;

//         const isCorrect = answer === currentQuestion.correct_answer;

//         try {
//             // Save answer to database
//             await fetch("/api/user-answers", {
//                 method: "POST",
//                 headers: { "Content-Type": "application/json" },
//                 body: JSON.stringify({
//                     userId: currentUser.id,
//                     sessionId: currentSession.id,
//                     questionId: currentQuestion.id,
//                     selectedAnswer: answer,
//                     isCorrect,
//                     responseTime:
//                         (currentSession.time_per_question || 10) - timeLeft,
//                 }),
//             });

//             // Update participant score
//             const currentParticipant = participants.find(
//                 (p) => p.user_id === currentUser.id
//             );
//             const newScore =
//                 (currentParticipant?.score || 0) + (isCorrect ? 10 : 0);

//             await fetch(
//                 `/api/quiz-sessions/${currentSession.id}/participants/${currentUser.id}`,
//                 {
//                     method: "PATCH",
//                     headers: { "Content-Type": "application/json" },
//                     body: JSON.stringify({
//                         score: newScore,
//                     }),
//                 }
//             );

//             // Show feedback
//             showToastMessage(
//                 isCorrect ? "Correct! +10 points" : "Incorrect answer",
//                 isCorrect ? "success" : "error"
//             );

//             // Reload participants to get updated scores
//             await loadParticipants(currentSession.id);
//         } catch (error) {
//             console.error("Error submitting answer:", error);
//             showToastMessage("Failed to submit answer", "error");
//         }
//     };

//     const currentQuestion = currentSession ? questions[currentSession.current_question_index] : null;
//     console.log("Current Question:", currentQuestion);

//         //  const currentQuestion = currentSession && questions.length > 0 ? questions[currentSession.current_question_index] : null;
//         //  console.log("Current Question:", currentQuestion);

//     if (loading) {
//         return (
//             <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 flex items-center justify-center pt-20 pb-20">
//                 <div className="bg-gray-800 rounded-lg shadow-lg p-8 text-center">
//                     <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-pink-600 mx-auto mb-4"></div>
//                     <p className="text-gray-300">Loading Admin Panel...</p>
//                 </div>
//             </div>
//         );
//     }

//     return (
//         <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 flex items-center justify-center pt-20 pb-20">
//             {showToast && (
//                 <Toast
//                     message={showToast.message}
//                     type={showToast.type}
//                     onClose={() => setShowToast(null)}
//                 />
//             )}

//             <div className="max-w-4xl mx-auto px-4">
//                 {/* User Selection */}
//                 <div className="bg-white rounded-lg shadow-sm mb-6">
//                     <div className="p-4 border-b">
//                         <h3 className="text-lg font-semibold">
//                             Select Your Profile
//                         </h3>
//                     </div>
//                     <div className="p-4">
//                         <div className="flex items-center gap-4">
//                             <span className="text-sm text-gray-600">
//                                 Playing as:
//                             </span>
//                             <div className="relative">
//                                 <button
//                                     onClick={() =>
//                                         setUserDropdownOpen(!userDropdownOpen)
//                                     }
//                                     className="flex items-center gap-2 px-4 py-2 bg-blue-100 rounded-lg text-sm font-medium hover:bg-blue-200 transition-colors"
//                                 >
//                                     {currentUser?.name || "Select User"}
//                                     <ChevronDown className="h-4 w-4" />
//                                 </button>
//                                 {userDropdownOpen && (
//                                     <div className="absolute top-full left-0 mt-1 bg-white border rounded-md shadow-lg z-10 min-w-48">
//                                         {users.map((user) => (
//                                             <button
//                                                 key={user.id}
//                                                 onClick={() => {
//                                                     setCurrentUser(user);
//                                                     setUserDropdownOpen(false);
//                                                     setIsJoined(false);
//                                                 }}
//                                                 className="block w-full text-left px-3 py-2 text-sm hover:bg-gray-100 transition-colors"
//                                             >
//                                                 {user.name}
//                                             </button>
//                                         ))}
//                                     </div>
//                                 )}
//                             </div>
//                             {currentUser && (
//                                 <div className="text-sm text-gray-600">
//                                     Score:{" "}
//                                     <span className="font-bold text-blue-600">
//                                         {participants.find(
//                                             (p) => p.user_id === currentUser?.id
//                                         )?.score || 0}
//                                     </span>
//                                 </div>
//                             )}
//                             {currentSession?.status === "live" &&
//                                 !isJoined &&
//                                 currentUser && (
//                                     <button
//                                         onClick={() => joinQuiz()}
//                                         className="px-3 py-1 bg-green-600 text-white text-sm rounded-md hover:bg-green-700 transition-colors"
//                                     >
//                                         Join Quiz
//                                     </button>
//                                 )}
//                         </div>
//                     </div>
//                 </div>

//                 {/* Quiz Status */}
//                 <div className="bg-white rounded-lg shadow-sm mb-6">
//                     <div className="p-4">
//                         <div className="flex items-center justify-between">
//                             <div className="flex items-center gap-3">
//                                 {checkingForQuiz ? (
//                                     <Loader2 className="h-5 w-5 text-blue-500 animate-spin" />
//                                 ) : (
//                                     <RefreshCw className="h-5 w-5 text-gray-400" />
//                                 )}
//                                 <span className="text-sm text-gray-600">
//                                     Quiz Status:
//                                 </span>
//                                 <span
//                                     className={`px-3 py-1 rounded-full text-sm font-medium ${
//                                         currentSession?.status === "live"
//                                             ? "bg-green-100 text-green-800"
//                                             : "bg-gray-100 text-gray-800"
//                                     }`}
//                                 >
//                                     {currentSession?.status === "live"
//                                         ? "LIVE"
//                                         : "WAITING"}
//                                 </span>
//                             </div>
//                             {currentSession?.status === "live" && (
//                                 <div className="text-sm text-gray-600">
//                                     Question{" "}
//                                     {(currentSession.current_question_index ||   0) + 1}{" "}
//                                     of {questions.length}
//                                 </div>
//                             )}
//                         </div>
//                     </div>
//                 </div>

//                 {/* Quiz Interface */}
//                 <div className="bg-white rounded-lg shadow-sm">
//                     <div className="p-6 border-b">
//                         <div className="flex items-center justify-between">
//                             <div>
//                                 <h2 className="text-xl font-semibold flex items-center gap-2">
//                                     <Users className="h-5 w-5" />
//                                     Live Quiz
//                                 </h2>
//                             </div>
//                         </div>
//                     </div>

//                     <div className="p-6">
//                         {currentSession?.status !== "live" && (
//                             <div className="text-center py-12">
//                                 <Clock className="h-16 w-16 mx-auto text-gray-400 mb-4" />
//                                 <h3 className="text-xl font-semibold mb-2">
//                                     Waiting for Quiz to Start
//                                 </h3>
//                                 <p className="text-gray-600 mb-4">
//                                     The admin will start the quiz shortly. Make
//                                     sure you've selected your profile above.
//                                 </p>
//                                 <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-md mx-auto">
//                                     <div className="flex items-center gap-2 text-blue-800">
//                                         <Users className="h-4 w-4" />
//                                         <span className="font-medium">
//                                             Ready to play!
//                                         </span>
//                                     </div>
//                                 </div>
//                             </div>
//                         )}

//                         {currentSession?.status === "live" &&
//                             currentQuestion && (                                //questions render
//                                 <div className="space-y-6">
//                                     <div className="flex items-center justify-between">
//                                         <div className="text-sm text-gray-500">
//                                             Question{" "}
//                                             {(currentSession.current_question_index ||   0) + 1}{" "}
//                                             of {questions.length}
//                                         </div>
//                                         <div className="flex items-center gap-2">
//                                             <Clock className="h-4 w-4" />
//                                             <span
//                                                 className={`font-mono text-lg font-bold ${
//                                                     timeLeft <= 3
//                                                         ? "text-red-600"
//                                                         : "text-gray-900"
//                                                 }`}
//                                             >
//                                                 {timeLeft}s
//                                             </span>
//                                         </div>
//                                     </div>

//                                     {/* Progress Bar */}
//                                     <div className="w-full bg-gray-200 rounded-full h-2">
//                                         <div
//                                             className={`h-2 rounded-full transition-all duration-1000 ${
//                                                 timeLeft <= 3
//                                                     ? "bg-red-500"
//                                                     : "bg-blue-600"
//                                             }`}
//                                             style={{
//                                                 width: `${
//                                                     (((currentSession.time_per_question ||
//                                                         10) -
//                                                         timeLeft) /
//                                                         (currentSession.time_per_question ||
//                                                             10)) *
//                                                     100
//                                                 }%`,
//                                             }}
//                                         ></div>
//                                     </div>

//                                     <div>
//                                         <div className="flex items-center gap-2 mb-4">
//                                             <h3 className="text-xl font-semibold">
//                                                 {currentQuestion.question}
//                                             </h3>
//                                         </div>
//                                         <div className="space-y-3">
//                                             {currentQuestion.options.map(
//                                                 (option, index) => (
//                                                     <label
//                                                         key={index}
//                                                         className={`flex items-center space-x-3 p-3 rounded-lg border cursor-pointer transition-colors ${
//                                                             hasAnswered
//                                                                 ? index ===
//                                                                   currentQuestion.correct_answer
//                                                                     ? "bg-green-100 border-green-300"
//                                                                     : selectedAnswer ===
//                                                                       index
//                                                                     ? "bg-red-100 border-red-300"
//                                                                     : "bg-gray-50 border-gray-200"
//                                                                 : selectedAnswer ===
//                                                                   index
//                                                                 ? "bg-blue-100 border-blue-300"
//                                                                 : "hover:bg-gray-50 border-gray-200"
//                                                         }`}
//                                                     >
//                                                         <input
//                                                             type="radio"
//                                                             name="answer"
//                                                             value={index}
//                                                             checked={
//                                                                 selectedAnswer ===
//                                                                 index
//                                                             }
//                                                             onChange={() =>
//                                                                 !hasAnswered &&
//                                                                 setSelectedAnswer(
//                                                                     index
//                                                                 )
//                                                             }
//                                                             disabled={
//                                                                 hasAnswered
//                                                             }
//                                                             className="w-4 h-4 text-blue-600"
//                                                         />
//                                                         <span className="flex-1">
//                                                             {option}
//                                                         </span>
//                                                         {hasAnswered &&
//                                                             index ===
//                                                                 currentQuestion.correct_answer && (
//                                                                 <span className="text-green-600 font-medium">
//                                                                     ✓ Correct
//                                                                 </span>
//                                                             )}
//                                                     </label>
//                                                 )
//                                             )}
//                                         </div>
//                                     </div>

//                                     <button
//                                         onClick={() => {
//                                             if (
//                                                 selectedAnswer !== null &&
//                                                 !hasAnswered
//                                             ) {
//                                                 submitAnswer(selectedAnswer);
//                                             }
//                                         }}
//                                         disabled={
//                                             selectedAnswer === null ||
//                                             hasAnswered ||
//                                             !isJoined
//                                         }
//                                         className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
//                                     >
//                                         {!isJoined
//                                             ? "Join Quiz First"
//                                             : hasAnswered
//                                             ? "Answer Submitted"
//                                             : "Submit Answer"}
//                                     </button>
//                                 </div>
//                             )}

//                         {currentSession?.status === "completed" && (
//                             <div className="text-center py-12">
//                                 <Trophy className="h-16 w-16 mx-auto text-yellow-500 mb-4" />
//                                 <h3 className="text-xl font-semibold mb-2">
//                                     Quiz Completed!
//                                 </h3>
//                                 <p className="text-gray-600 mb-4">
//                                     Your final score:{" "}
//                                     <strong className="text-2xl text-blue-600">
//                                         {participants.find(
//                                             (p) => p.user_id === currentUser?.id
//                                         )?.score || 0}{" "}
//                                         points
//                                     </strong>
//                                 </p>
//                                 <div className="bg-gray-50 rounded-lg p-4 max-w-md mx-auto mb-4">
//                                     <p className="text-sm text-gray-600">
//                                         Questions answered:{" "}
//                                         {participants.find(
//                                             (p) => p.user_id === currentUser?.id
//                                         )?.total_questions_answered || 0}
//                                         /{questions.length}
//                                     </p>
//                                 </div>
//                                 <button
//                                     onClick={() => {
//                                         setCurrentSession(null);
//                                         setSelectedAnswer(null);
//                                         setHasAnswered(false);
//                                         setIsJoined(false);
//                                         setTimeLeft(10);
//                                     }}
//                                     className="bg-blue-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors"
//                                 >
//                                     Ready for Next Quiz
//                                 </button>
//                             </div>
//                         )}
//                     </div>
//                 </div>
//             </div>
//         </div>
//     );
// }
// // 